import { Command } from "commander";
import fs from "node:fs";
import path from "node:path";
import { logger, isZopioProject, getI18nConfig } from "../utils/helpers.js";

export const jobsCommand = new Command("jobs")
  .description("Manage background jobs and triggers")
  .option("-l, --list", "List all registered jobs")
  .option("-c, --create <name>", "Create a new job")
  .option("-t, --trigger <jobId>", "Manually trigger a job")
  .option("-s, --schedule <cron>", "Set job schedule (cron expression)")
  .action((options) => {
    const cwd = process.cwd();
    
    // Check if running in a Zopio project
    if (!isZopioProject()) {
      logger.error("Not running in a Zopio project directory.");
      return;
    }
    
    if (options.list) {
      logger.title("Registered Jobs");
      
      // Look for job files in common locations
      const jobLocations = [
        path.join(cwd, "app/jobs"),
        path.join(cwd, "app/trigger/jobs"),
        path.join(cwd, "src/jobs")
      ];
      
      let foundJobs = false;
      
      for (const location of jobLocations) {
        if (fs.existsSync(location)) {
          const files = fs.readdirSync(location);
          const jobFiles = files.filter(file => 
            file.endsWith('.js') || file.endsWith('.ts') || file.endsWith('.mjs')
          );
          
          if (jobFiles.length > 0) {
            foundJobs = true;
            logger.info(`Jobs in ${path.relative(cwd, location)}:`);
            
            for (const jobFile of jobFiles) {
              logger.info(`  - ${jobFile}`);
            }
          }
        }
      }
      
      if (!foundJobs) {
        logger.info("No jobs found. Create one with 'zopio jobs --create <name>'");
      }
      
      return;
    }
    
    if (options.create) {
      const jobName = options.create;
      const jobFileName = jobName.endsWith('-jobs') ? `${jobName}.ts` : `${jobName}-jobs.ts`;
      
      // Determine the best location for the job file
      let jobDir = path.join(cwd, "app/trigger/jobs");
      
      if (!fs.existsSync(jobDir)) {
        // Try alternative locations
        const alternatives = [
          path.join(cwd, "app/jobs"),
          path.join(cwd, "src/jobs")
        ];
        
        for (const alt of alternatives) {
          if (fs.existsSync(alt)) {
            jobDir = alt;
            break;
          }
        }
        
        // If none exist, create the primary one
        if (!fs.existsSync(jobDir)) {
          fs.mkdirSync(jobDir, { recursive: true });
        }
      }
      
      const jobPath = path.join(jobDir, jobFileName);
      
      if (fs.existsSync(jobPath)) {
        logger.warning(`Job file already exists at ${path.relative(cwd, jobPath)}`);
        return;
      }
      
      // Get i18n config to support internationalization in jobs
      const i18nConfig = getI18nConfig(cwd);
      const supportedLocales = i18nConfig.locales || ['en', 'tr', 'es', 'de'];
      const defaultLocale = i18nConfig.defaultLocale || 'en';
      
      // Create the job file with i18n support
      const jobContent = `/**
 * ${jobName} background jobs
 * Generated by Zopio CLI
 */

import { defineJob } from '@zopio/trigger';
import { useTranslations } from 'next-intl';

// Job status messages in different languages
const statusMessages = {
  en: {
    success: 'Job completed successfully',
    running: 'Job is running',
    failed: 'Job failed'
  },
  tr: {
    success: 'İş başarıyla tamamlandı',
    running: 'İş çalışıyor',
    failed: 'İş başarısız oldu'
  },
  es: {
    success: 'Trabajo completado con éxito',
    running: 'El trabajo está en ejecución',
    failed: 'Trabajo fallido'
  },
  de: {
    success: 'Job erfolgreich abgeschlossen',
    running: 'Job läuft',
    failed: 'Job fehlgeschlagen'
  }
};

/**
 * Example job that can be scheduled or triggered manually
 * Includes internationalization support
 */
export const exampleJob = defineJob({
  id: '${jobName}-example',
  name: 'Example ${jobName} job',
  handler: async (payload, context) => {
    console.log('Running ${jobName} job with payload:', payload);
    
    // Get user locale from context or use default
    const locale = context?.locale || '${defaultLocale}';
    const messages = statusMessages[locale] || statusMessages.${defaultLocale};
    
    try {
      // Your job logic here
      
      return { 
        success: true, 
        message: messages.success,
        data: payload
      };
    } catch (error) {
      return {
        success: false,
        message: messages.failed,
        error: error.message
      };
    }
  },
  // Default schedule (optional) - runs every day at midnight
  schedule: '0 0 * * *'
});

/**
 * Register all jobs from this file
 */
export default function register() {
  return [
    exampleJob,
    // Add more jobs here
  ];
}
`;
      
      fs.writeFileSync(jobPath, jobContent);
      logger.success(`Created job file: ${path.relative(cwd, jobPath)}`);
      
      // Create an index file if it doesn't exist
      const indexPath = path.join(jobDir, "index.ts");
      if (!fs.existsSync(indexPath)) {
        const indexContent = `/**
 * Jobs index file
 * Generated by Zopio CLI
 */

import ${jobName}Jobs from './${jobFileName.replace('.ts', '')}';

// Register all jobs
export default function registerAllJobs() {
  return [
    ...${jobName}Jobs(),
    // Add more job registrations here
  ];
}
`;
        fs.writeFileSync(indexPath, indexContent);
        logger.success(`Created jobs index file: ${path.relative(cwd, indexPath)}`);
      } else {
        logger.info(`Consider updating your jobs index file to include the new ${jobName} jobs.`);
      }
      
      return;
    }
    
    if (options.trigger) {
      const jobId = options.trigger;
      logger.info(`Triggering job: ${jobId}`);
      logger.warning("This feature requires a running Zopio application.");
      logger.info("To implement this feature, you would need to:");
      logger.info("1. Connect to your application's API");
      logger.info("2. Call the job trigger endpoint");
      logger.info("3. Display the results of the job execution");
      return;
    }
    
    // If no options provided, show help
    this.help();
  });
